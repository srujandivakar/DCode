// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ContestStatus {
  LIVE
  UPCOMING
  ENDED
}

model User {
  id                      String    @id @default(uuid())
  username                String    @unique
  fullName                String?
  email                   String    @unique
  isEmailVerified         Boolean?  @default(false)
  avatar                  String?   @default("https://via.placeholder.com/200x200.png")
  role                    UserRole  @default(USER)
  password                String    @default("")
  refreshToken            String?
  forgotPasswordToken     String?
  forgotPasswordExpiry    DateTime?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  dailyProblemStreak      Int       @default(0)
  isStreakMaintained      Boolean   @default(false)
  lastSubmissionDate      DateTime?
  provider                String    @default("local")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  Problem           Problem[]
  Submission        Submission[]
  ProblemSolved     ProblemSolved[]
  Playlist          Playlist[]
  Discussion        Discussion[]
  Comment           Comment[]
  DiscussionUpvote  DiscussionUpvote[]
  Contestant        Contestant[]
  ContestSubmission ContestSubmission[]
  CommentUpvote     CommentUpvote[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  demo               Boolean?   @default(false)
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Realtionship
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  Submission        Submission[]
  SolvedBy          ProblemSolved[]
  ProblemInPlaylist ProblemInPlaylist[]
  ContestProblem    ContestProblem[]
  ContestSubmission ContestSubmission[]

  @@unique([title])
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted , Wrong, Runtime Error, Time Limit Exceeded
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem           Problem            @relation(fields: [problemId], references: [id], onDelete: Cascade)
  TestCaseResult    TestCaseResult[]
  ContestSubmission ContestSubmission?
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  visibilty   Boolean? @default(false)
  type        String?  @default("private")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  problems ProblemInPlaylist[]
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}

model Discussion {
  id            String   @id @default(uuid())
  userId        String
  title         String
  description   String
  tags          String[] @default([])
  commentsCount Int      @default(0)
  upvotes       Int?     @default(0)
  views         Int?     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         Comment[]
  DiscussionUpvote DiscussionUpvote[]

  @@unique([userId, title])
}

model Comment {
  id        String   @id @default(uuid())
  discussId String
  userId    String
  comment   String
  upvote    Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discuss       Discussion      @relation(fields: [discussId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  CommentUpvote CommentUpvote[]
}

model CommentUpvote {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  @@unique([userId, commentId])
}

model DiscussionUpvote {
  id           String   @id @default(uuid())
  userId       String
  discussionId String
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@unique([userId, discussionId])
}

model Contest {
  id          String        @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      ContestStatus @default(UPCOMING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  problems          ContestProblem[]
  contestants       Contestant[]
  ContestSubmission ContestSubmission[]

  @@unique([title])
}

model Contestant {
  id        String   @id @default(uuid())
  userId    String
  contestId String
  score     Int      @default(0)
  rank      Int?
  joinedAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
}

model ContestProblem {
  id        String @id @default(uuid())
  contestId String
  problemId String
  points    Int    @default(100)
  order     Int    @default(0)

  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([contestId, problemId])
}

model ContestSubmission {
  id           String   @id @default(uuid())
  contestId    String
  userId       String
  problemId    String
  submissionId String   @unique
  score        Int?
  timeTaken    Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  contest    Contest    @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem    Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId, problemId]) // To prevent multiple scoring entries
}
